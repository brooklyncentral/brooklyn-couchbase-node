{"entities": [{"name": "CouchBase Node", "type": "org.apache.brooklyn.entity.nosql.couchbase.CouchbaseNode", "iconUrl": "", "effectors": [{"returnType": "java.lang.Void", "name": "addReplicationRule", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "fromBucket", "description": "Bucket to be replicated"}, {"defaultValue": null, "type": "java.lang.Object", "name": "toCluster", "description": "Entity (or ID) of the cluster to which this should replicate"}, {"defaultValue": null, "type": "java.lang.String", "name": "toBucket", "description": "Destination bucket for replication in the toCluster, defaulting to the same as the fromBucket"}], "description": "Adds a replication rule from the indicated bucket on the cluster where this node is located to the indicated cluster and optional destination bucket"}, {"returnType": "void", "name": "bucketCreate", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "bucketName"}, {"defaultValue": null, "type": "java.lang.String", "name": "bucketType"}, {"defaultValue": null, "type": "java.lang.Integer", "name": "bucketPort"}, {"defaultValue": null, "type": "java.lang.Integer", "name": "bucketRamSize"}, {"defaultValue": null, "type": "java.lang.Integer", "name": "bucketReplica"}], "description": "create a new bucket"}, {"returnType": "void", "name": "populateServiceNotUpDiagnostics", "parameters": [], "description": "Populates the attribute service.notUp.diagnostics, with any available health indicators"}, {"returnType": "void", "name": "rebalance", "parameters": [], "description": "rebalance the couchbase cluster"}, {"returnType": "void", "name": "restart", "parameters": [], "description": "Restart the process/service represented by an entity"}, {"returnType": "void", "name": "serverAdd", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "serverHostname"}, {"defaultValue": null, "type": "java.lang.String", "name": "username"}, {"defaultValue": null, "type": "java.lang.String", "name": "password"}], "description": "add a server to a cluster"}, {"returnType": "void", "name": "serverAddAndRebalance", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "serverHostname"}, {"defaultValue": null, "type": "java.lang.String", "name": "username"}, {"defaultValue": null, "type": "java.lang.String", "name": "password"}], "description": "add a server to a cluster, and immediately rebalances"}, {"returnType": "void", "name": "start", "parameters": [{"defaultValue": null, "type": "java.lang.Object", "name": "locations", "description": "The location or locations to start in, as a string, a location object, a list of strings, or a list of location objects"}], "description": "Start the process/service represented by an entity"}, {"returnType": "void", "name": "stop", "parameters": [], "description": "Stop the process/service represented by an entity"}], "sensors": [{"type": "java.lang.Integer", "name": "couchbase.apiPort", "links": {}, "description": "Couchbase API Port"}, {"type": "java.lang.Integer", "name": "couchbase.clientInterfaceProxy", "links": {}, "description": "Client interface (proxy)"}, {"type": "java.lang.Integer", "name": "couchbase.clusterInitRamSize", "links": {}, "description": "initial ram size of the cluster"}, {"type": "java.lang.Integer", "name": "couchbase.erlangPortMapper", "links": {}, "description": "Erlang Port Mapper Daemon Listener Port (epmd)"}, {"type": "java.lang.Integer", "name": "couchbase.incomingSslProxy", "links": {}, "description": "Incoming SSL Proxy"}, {"type": "java.lang.Integer", "name": "couchbase.internalBucketPort", "links": {}, "description": "Internal Bucket Port"}, {"type": "java.lang.Integer", "name": "couchbase.internalCapiHttpsForSsl", "links": {}, "description": "Internal CAPI HTTPS for SSL"}, {"type": "java.lang.Integer", "name": "couchbase.internalExternalBucketPort", "links": {}, "description": "Internal/External Bucket Port"}, {"type": "java.lang.Integer", "name": "couchbase.internalOutgoingSslProxy", "links": {}, "description": "Internal Outgoing SSL Proxy"}, {"type": "java.lang.Integer", "name": "couchbase.internalRestHttpsForSsl", "links": {}, "description": "Internal REST HTTPS for SSL"}, {"type": "java.lang.Boolean", "name": "couchbase.isInCluster", "links": {}, "description": "flag to determine if the current couchbase node has been added to a cluster, including being the first / primary node"}, {"type": "java.lang.Boolean", "name": "couchbase.isPrimaryNode", "links": {}, "description": "flag to determine if the current couchbase node is the primary node for the cluster"}, {"type": "java.lang.Integer", "name": "couchbase.nodeDataExchangePortRangeEnd", "links": {}, "description": "Node data exchange Port Range End"}, {"type": "java.lang.Integer", "name": "couchbase.nodeDataExchangePortRangeStart", "links": {}, "description": "Node data exchange Port Range Start"}, {"type": "java.lang.String", "name": "couchbase.rebalance.status", "links": {}, "description": "Displays the current rebalance status from pools/nodes/rebalanceStatus"}, {"type": "java.lang.Double", "name": "couchbase.stats.cmd.get", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/cmd_get"}, {"type": "java.lang.Long", "name": "couchbase.stats.couch.docs.actual.disk.size", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/couch_docs_actual_disk_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.couch.docs.data.size", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/couch_docs_data_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.couch.views.actual.disk.size", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/couch_views_actual_disk_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.couch.views.data.size", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/couch_views_data_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.curr.items", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/curr_items"}, {"type": "java.lang.Long", "name": "couchbase.stats.curr.items.tot", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/curr_items_tot"}, {"type": "java.lang.Long", "name": "couchbase.stats.ep.bg.fetched", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/ep_bg_fetched"}, {"type": "java.lang.Long", "name": "couchbase.stats.get.hits", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/get_hits"}, {"type": "java.lang.Long", "name": "couchbase.stats.mem.used", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/mem_used"}, {"type": "java.lang.Double", "name": "couchbase.stats.ops", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/ops"}, {"type": "java.lang.Long", "name": "couchbase.stats.vb.replica.curr.items", "links": {}, "description": "Retrieved from pools/nodes/<current node>/interestingStats/vb_replica_curr_items"}, {"type": "java.lang.Integer", "name": "couchbase.webAdminPort", "links": {}, "description": "Web Administration Port"}, {"type": "java.util.Map", "name": "download.addon.urls", "links": {}, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "download.url", "links": {}, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "links": {}, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.lang.String", "name": "host.address", "links": {}, "description": "Host IP address"}, {"type": "java.lang.String", "name": "host.name", "links": {}, "description": "Host name"}, {"type": "java.lang.String", "name": "host.subnet.address", "links": {}, "description": "Host address as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "host.subnet.hostname", "links": {}, "description": "Host name as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "install.dir", "links": {}, "description": "Directory for this software to be installed in"}, {"type": "java.net.URI", "name": "main.uri", "links": {}, "description": "Main URI for contacting the service/endpoint offered by this entity"}, {"type": "java.lang.String", "name": "run.dir", "links": {}, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "service.isUp", "links": {}, "description": "Whether the service is active and availability (confirmed and monitored)"}, {"type": "java.lang.Boolean", "name": "service.process.isRunning", "links": {}, "description": "Whether the process for the service is confirmed as running"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle", "name": "service.state", "links": {}, "description": "Actual lifecycle state of the service"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle$Transition", "name": "service.state.expected", "links": {}, "description": "Last controlled change to service state, indicating what the expected state should be"}, {"type": "java.lang.String", "name": "softwareprocess.pid.file", "links": {}, "description": "PID file"}, {"type": "org.apache.brooklyn.api.location.MachineProvisioningLocation", "name": "softwareservice.provisioningLocation", "links": {}, "description": "Location used to provision a machine where this is running"}], "defaultVersion": "3.0.0", "config": [{"type": "java.lang.String", "name": "archive.nameFormat", "reconfigurable": false, "description": "The format for the directory created when the installation archive is extracted, if required. The version string will be passed in as the first argument, replacing the %s format specifier"}, {"name": "children.startable.mode", "defaultValue": "NONE", "reconfigurable": false, "possibleValues": [{"description": "NONE", "value": "NONE"}, {"description": "FOREGROUND", "value": "FOREGROUND"}, {"description": "FOREGROUND_LATE", "value": "FOREGROUND_LATE"}, {"description": "BACKGROUND", "value": "BACKGROUND"}, {"description": "BACKGROUND_LATE", "value": "BACKGROUND_LATE"}], "type": "java.lang.Enum", "description": "Controls behaviour when starting Startable children as part of this entity's lifecycle."}, {"defaultValue": "Password", "type": "java.lang.String", "name": "couchbase.adminPassword", "reconfigurable": false, "description": "Password for the admin user on the node"}, {"defaultValue": "Administrator", "type": "java.lang.String", "name": "couchbase.adminUsername", "reconfigurable": false, "description": "Username for the admin user on the node"}, {"defaultValue": "8092-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.apiPort", "reconfigurable": false, "description": "Couchbase API Port"}, {"defaultValue": "11211", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.clientInterfaceProxy", "reconfigurable": false, "description": "Client interface (proxy)"}, {"defaultValue": 300, "type": "java.lang.Integer", "name": "couchbase.clusterInitRamSize", "reconfigurable": false, "description": "initial ram size of the cluster"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "couchbase.enterprise.enabled", "reconfigurable": false, "description": "Whether to use Couchbase Enterprise; if false uses the community version. Defaults to true."}, {"defaultValue": "4369", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.erlangPortMapper", "reconfigurable": false, "description": "Erlang Port Mapper Daemon Listener Port (epmd)"}, {"defaultValue": "11214", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.incomingSslProxy", "reconfigurable": false, "description": "Incoming SSL Proxy"}, {"defaultValue": "11209", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.internalBucketPort", "reconfigurable": false, "description": "Internal Bucket Port"}, {"defaultValue": "18092", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.internalCapiHttpsForSsl", "reconfigurable": false, "description": "Internal CAPI HTTPS for SSL"}, {"defaultValue": "11210", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.internalExternalBucketPort", "reconfigurable": false, "description": "Internal/External Bucket Port"}, {"defaultValue": "11215", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.internalOutgoingSslProxy", "reconfigurable": false, "description": "Internal Outgoing SSL Proxy"}, {"defaultValue": "18091", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.internalRestHttpsForSsl", "reconfigurable": false, "description": "Internal REST HTTPS for SSL"}, {"defaultValue": "21199-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.nodeDataExchangePortRangeEnd", "reconfigurable": false, "description": "Node data exchange Port Range End"}, {"defaultValue": "21100-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.nodeDataExchangePortRangeStart", "reconfigurable": false, "description": "Node data exchange Port Range Start"}, {"defaultValue": "8091-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "couchbase.webAdminPort", "reconfigurable": false, "description": "Web Administration Port"}, {"type": "java.lang.Boolean", "name": "customize.latch", "reconfigurable": false, "description": "Latch for blocking customize until ready"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "dontRequireTtyForSudo", "reconfigurable": false, "description": "Whether to explicitly set /etc/sudoers, so don't need tty (will leave unchanged if 'false'); some machines require a tty for sudo; brooklyn by default does not use a tty (so that it can get separate error+stdout streams); you can enable a tty as an option to every ssh command, or you can do it once and modify the machine so that a tty is not subsequently required."}, {"type": "java.util.Map", "name": "download.addon.urls", "reconfigurable": false, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"defaultValue": "http://packages.couchbase.com/releases/${version}/couchbase-server-${driver.communityOrEnterprise}${driver.downloadLinkPreVersionSeparator}${version}${driver.downloadLinkOsTagWithPrefix}", "type": "java.lang.String", "name": "download.url", "reconfigurable": false, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.Boolean", "name": "entity.running", "reconfigurable": false, "description": "Skip the startup process entirely, if service already running"}, {"type": "java.lang.Boolean", "name": "entity.started", "reconfigurable": false, "description": "Skip the startup process entirely, for running services"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "reconfigurable": false, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.util.Map", "name": "files.install", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.preinstall", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.runtime", "reconfigurable": false, "description": "Mapping of files, to be copied before customisation, to destination name relative to runDir"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "inboundPorts.autoInfer", "reconfigurable": false, "description": "If set to false turns off the opening of ports based on naming convention, and also those that are of type PortRange in Java entities"}, {"defaultValue": ".*\\.port", "type": "java.lang.String", "name": "inboundPorts.configRegex", "reconfigurable": false, "description": "Regex governing the opening of ports based on config names"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/installs/${(config['install.unique_label']??)?string(config['install.unique_label']!'X',(entity.entityType.simpleName)+((config['install.version']??)?string('_'+(config['install.version']!'X'),'')))}", "type": "java.lang.String", "name": "install.dir", "reconfigurable": false, "description": "Directory for this software to be installed in"}, {"type": "java.lang.Boolean", "name": "install.latch", "reconfigurable": false, "description": "Latch for blocking install until ready"}, {"type": "java.lang.Boolean", "name": "install.skip", "reconfigurable": false, "description": "Skip the driver install commands entirely, for pre-installed software"}, {"type": "java.lang.String", "name": "install.unique_label", "reconfigurable": false, "description": "Provides a label which uniquely identifies an installation, used in the computation of the install dir; this should include something readable, and must include a hash of all data which differentiates an installation (e.g. version, plugins, etc), but should be the same where install dirs can be shared to allow for re-use"}, {"defaultValue": "3.0.0", "type": "java.lang.String", "name": "install.version", "reconfigurable": false, "description": "Suggested version"}, {"type": "java.lang.Boolean", "name": "launch.latch", "reconfigurable": false, "description": "Latch for blocking launch until ready"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "metrics.usage.retrieve", "reconfigurable": false, "description": "Whether to retrieve the usage (e.g. performance) metrics"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "openIptables", "reconfigurable": false, "description": "Whether to open the INBOUND_PORTS via iptables rules; if true then ssh in to run iptables commands, as part of machine provisioning"}, {"type": "java.lang.String", "name": "post.customize.command", "reconfigurable": false, "description": "Command to be run after the customize method being called on the driver"}, {"type": "java.lang.String", "name": "post.install.command", "reconfigurable": false, "description": "Command to be run after the install method being called on the driver"}, {"type": "java.lang.String", "name": "post.launch.command", "reconfigurable": false, "description": "Command to be run after the launch method being called on the driver"}, {"type": "java.lang.String", "name": "pre.customize.command", "reconfigurable": false, "description": "Command to be run prior to the customize method being called on the driver"}, {"type": "java.lang.String", "name": "pre.install.command", "reconfigurable": false, "description": "Command to be run prior to the install method being called on the driver"}, {"type": "java.lang.String", "name": "pre.launch.command", "reconfigurable": false, "description": "Command to be run prior to the launch method being called on the driver"}, {"defaultValue": {}, "type": "java.util.Map", "name": "provisioning.properties", "reconfigurable": false, "description": "Custom properties to be passed in when provisioning a new machine"}, {"defaultValue": [22], "type": "java.util.Collection", "name": "requiredOpenLoginPorts", "reconfigurable": false, "description": "The port(s) to be opened, to allow login"}, {"type": "java.lang.Boolean", "name": "resources.install.latch", "reconfigurable": false, "description": "Latch for blocking install resources until ready"}, {"type": "java.lang.Boolean", "name": "resources.runtime.latch", "reconfigurable": false, "description": "Latch for blocking runtime resources until ready"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/apps/${entity.applicationId}/entities/${entity.entityType.simpleName}_${entity.id}", "type": "java.lang.String", "name": "run.dir", "reconfigurable": false, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "setup.latch", "reconfigurable": false, "description": "Latch for blocking setup until ready"}, {"defaultValue": {}, "type": "java.util.Map", "name": "shell.env", "reconfigurable": false, "description": "Map of environment variables to pass to the runtime shell"}, {"defaultValue": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks@5d59d69c", "type": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks", "name": "softwareProcess.lifecycleTasks", "reconfigurable": false, "description": "An object that handles lifecycle of an entity's associated machine."}, {"defaultValue": "10s", "type": "org.apache.brooklyn.util.time.Duration", "name": "softwareProcess.maxSensorRebindDelay", "reconfigurable": false, "description": "The maximum delay to apply when reconnecting sensors when rebinding to this entity. Brooklyn will wait a random amount of time, up to the value of this config key, to avoid a thundering herd problem when the entity shares its machine with several others. Set to null or to 0 to disable any delay."}, {"type": "java.lang.Boolean", "name": "start.latch", "reconfigurable": false, "description": "Latch for blocking start until ready"}, {"defaultValue": "2m", "type": "org.apache.brooklyn.util.time.Duration", "name": "start.timeout", "reconfigurable": false, "description": "Time to wait for process and for SERVICE_UP before failing (in seconds, default 2m)"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "stopIptables", "reconfigurable": false, "description": "Whether to stop iptables entirely; if true then ssh in to stop the iptables service, as part of machine provisioning"}, {"type": "java.util.Map", "name": "templates.install", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.preinstall", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before pre-install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.runtime", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before customisation, to destination name relative to runDir"}], "description": "Couchbase Server is an open source, distributed (shared-nothing architecture) NoSQL document-oriented database that is optimized for interactive applications."}]}